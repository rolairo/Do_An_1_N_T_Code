D G "__PCM__" 0 770 ""5.015""
D G "__DEVICE__" 0 770 "877"
D G "__DATE__" 0 770 ""06-May-20""
D G "__TIME__" 0 770 ""21:02:47"" "Standard Header file for the PIC16F877 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 37 "int8" `53 
f B "set_tris_a" 1 37 "void(int8 value)" `52 
v L "value" 1 38 "int8" `55 
f B "set_tris_b" 1 38 "void(int8 value)" `54 
v L "value" 1 39 "int8" `57 
f B "set_tris_c" 1 39 "void(int8 value)" `56 
v L "value" 1 40 "int8" `59 
f B "set_tris_d" 1 40 "void(int8 value)" `58 
v L "value" 1 41 "int8" `61 
f B "set_tris_e" 1 41 "void(int8 value)" `60 
f B "get_tris_a" 1 42 "int8()" `62 
f B "get_tris_b" 1 43 "int8()" `63 
f B "get_tris_c" 1 44 "int8()" `64 
f B "get_tris_d" 1 45 "int8()" `65 
f B "get_tris_e" 1 46 "int8()" `66 
v L "value" 1 47 "int8" `68 
f B "output_a" 1 47 "void(int8 value)" `67 
v L "value" 1 48 "int8" `70 
f B "output_b" 1 48 "void(int8 value)" `69 
v L "value" 1 49 "int8" `72 
f B "output_c" 1 49 "void(int8 value)" `71 
v L "value" 1 50 "int8" `74 
f B "output_d" 1 50 "void(int8 value)" `73 
v L "value" 1 51 "int8" `76 
f B "output_e" 1 51 "void(int8 value)" `75 
f B "input_a" 1 52 "int8()" `77 
f B "input_b" 1 53 "int8()" `78 
f B "input_c" 1 54 "int8()" `79 
f B "input_d" 1 55 "int8()" `80 
f B "input_e" 1 56 "int8()" `81 
f B "input_change_a" 1 57 "int8()" `82 
f B "input_change_b" 1 58 "int8()" `83 
f B "input_change_c" 1 59 "int8()" `84 
f B "input_change_d" 1 60 "int8()" `85 
f B "input_change_e" 1 61 "int8()" `86 
v L "pin" 1 62 "int16" `88 
f B "input" 1 62 "int8(int16 pin)" `87 
v L "pin" 1 63 "int16" `90 
f B "input_state" 1 63 "int8(int16 pin)" `89 
v L "pin" 1 64 "int16" `92 
f B "output_low" 1 64 "void(int16 pin)" `91 
v L "pin" 1 65 "int16" `94 
f B "output_high" 1 65 "void(int16 pin)" `93 
v L "pin" 1 66 "int16" `96 
f B "output_toggle" 1 66 "void(int16 pin)" `95 
v L "pin" 1 67 "int16" `98 
v L "level" 1 67 "int8" `99 
f B "output_bit" 1 67 "void(int16 pin,int8 level)" `97 
v L "pin" 1 68 "int16" `101 
f B "output_float" 1 68 "void(int16 pin)" `100 
v L "pin" 1 69 "int16" `103 
f B "output_drive" 1 69 "void(int16 pin)" `102  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 73 "40"
d G "PIN_A1" 1 74 "41"
d G "PIN_A2" 1 75 "42"
d G "PIN_A3" 1 76 "43"
d G "PIN_A4" 1 77 "44"
d G "PIN_A5" 1 78 "45"
d G "PIN_B0" 1 80 "48"
d G "PIN_B1" 1 81 "49"
d G "PIN_B2" 1 82 "50"
d G "PIN_B3" 1 83 "51"
d G "PIN_B4" 1 84 "52"
d G "PIN_B5" 1 85 "53"
d G "PIN_B6" 1 86 "54"
d G "PIN_B7" 1 87 "55"
d G "PIN_C0" 1 89 "56"
d G "PIN_C1" 1 90 "57"
d G "PIN_C2" 1 91 "58"
d G "PIN_C3" 1 92 "59"
d G "PIN_C4" 1 93 "60"
d G "PIN_C5" 1 94 "61"
d G "PIN_C6" 1 95 "62"
d G "PIN_C7" 1 96 "63"
d G "PIN_D0" 1 98 "64"
d G "PIN_D1" 1 99 "65"
d G "PIN_D2" 1 100 "66"
d G "PIN_D3" 1 101 "67"
d G "PIN_D4" 1 102 "68"
d G "PIN_D5" 1 103 "69"
d G "PIN_D6" 1 104 "70"
d G "PIN_D7" 1 105 "71"
d G "PIN_E0" 1 107 "72"
d G "PIN_E1" 1 108 "73"
d G "PIN_E2" 1 109 "74"
d G "FALSE" 1 112 "0"
d G "TRUE" 1 113 "1"
d G "BYTE" 1 115 "int8"
d G "BOOLEAN" 1 116 "int1"
d G "getc" 1 118 "getch"
d G "fgetc" 1 119 "getch"
d G "getchar" 1 120 "getch"
d G "putc" 1 121 "putchar"
d G "fputc" 1 122 "putchar"
d G "fgets" 1 123 "gets"
d G "fputs" 1 124 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 129 "int8()" `104 
f B "reset_cpu" 1 130 "void()" `105 
f B "sleep" 1 131 "void()" `106  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 133 "3"
d G "WDT_TIMEOUT" 1 134 "11"
d G "MCLR_FROM_SLEEP" 1 135 "19"
d G "MCLR_FROM_RUN" 1 136 "27"
d G "NORMAL_POWER_UP" 1 137 "25"
d G "BROWNOUT_RESTART" 1 138 "26"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 145 "int8" `108 
f B "setup_timer_0" 1 145 "void(int8 mode)" `107 
v L "value" 1 146 "int8" `110 
f B "set_timer0" 1 146 "void(int8 value)" `109 
f B "get_timer0" 1 147 "int8()" `111 
v L "mode" 1 148 "int8" `113 
v L "prescaler" 1 148 "int8" `114 
f B "setup_counters" 1 148 "void(int8 mode,int8 prescaler)" `112 
v L "value" 1 149 "int8" `116 
f B "set_rtcc" 1 149 "void(int8 value)" `115 
f B "get_rtcc" 1 150 "int8()" `117  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 152 "0"
d G "T0_EXT_L_TO_H" 1 153 "32"
d G "T0_EXT_H_TO_L" 1 154 "48"
d G "T0_DIV_1" 1 156 "8"
d G "T0_DIV_2" 1 157 "0"
d G "T0_DIV_4" 1 158 "1"
d G "T0_DIV_8" 1 159 "2"
d G "T0_DIV_16" 1 160 "3"
d G "T0_DIV_32" 1 161 "4"
d G "T0_DIV_64" 1 162 "5"
d G "T0_DIV_128" 1 163 "6"
d G "T0_DIV_256" 1 164 "7"
d G "T0_8_BIT" 1 167 "0"
d G "RTCC_INTERNAL" 1 169 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 170 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 171 "48"
d G "RTCC_DIV_1" 1 172 "8"
d G "RTCC_DIV_2" 1 173 "0"
d G "RTCC_DIV_4" 1 174 "1"
d G "RTCC_DIV_8" 1 175 "2"
d G "RTCC_DIV_16" 1 176 "3"
d G "RTCC_DIV_32" 1 177 "4"
d G "RTCC_DIV_64" 1 178 "5"
d G "RTCC_DIV_128" 1 179 "6"
d G "RTCC_DIV_256" 1 180 "7"
d G "RTCC_8_BIT" 1 181 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 192 "int16" `119 
f B "setup_wdt" 1 192 "void(int16 mode)" `118 
f B "restart_wdt" 1 193 "void()" `120  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 196 "8"
d G "WDT_36MS" 1 197 "9"
d G "WDT_72MS" 1 198 "10"
d G "WDT_144MS" 1 199 "11"
d G "WDT_288MS" 1 200 "12"
d G "WDT_576MS" 1 201 "13"
d G "WDT_1152MS" 1 202 "14"
d G "WDT_2304MS" 1 203 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 209 "int16" `122 
f B "setup_timer_1" 1 209 "void(int16 mode)" `121 
f B "get_timer1" 1 210 "int16()" `123 
v L "value" 1 211 "int16" `125 
f B "set_timer1" 1 211 "void(int16 value)" `124  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 214 "0"
d G "T1_INTERNAL" 1 215 "0x85"
d G "T1_EXTERNAL" 1 216 "0x87"
d G "T1_EXTERNAL_SYNC" 1 217 "0x83"
d G "T1_CLK_OUT" 1 219 "8"
d G "T1_DIV_BY_1" 1 221 "0"
d G "T1_DIV_BY_2" 1 222 "0x10"
d G "T1_DIV_BY_4" 1 223 "0x20"
d G "T1_DIV_BY_8" 1 224 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 229 "int8" `127 
v L "period" 1 229 "int8" `128 
v L "postscale" 1 229 "int8" `129 
f B "setup_timer_2" 1 229 "void(int8 mode,int8 period,int8 postscale)" `126 
f B "get_timer2" 1 230 "int8()" `130 
v L "value" 1 231 "int8" `132 
f B "set_timer2" 1 231 "void(int8 value)" `131  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 233 "0"
d G "T2_DIV_BY_1" 1 234 "4"
d G "T2_DIV_BY_4" 1 235 "5"
d G "T2_DIV_BY_16" 1 236 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
v L "mode" 1 242 "int32" `134 
f B "setup_ccp1" 1 242 "void(int32 mode)" `133 
v L "mode" 1 243 "int32" `136 
v L "pwm" 1 243 "int8" `137 
f G "setup_ccp1" 1 243 "void(int32 mode,int8 pwm)" `135 
v L "value" 1 244 "int16" `139 
f B "set_pwm1_duty" 1 244 "void(int16 value)" `138  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 246 "0"
d G "CCP_CAPTURE_FE" 1 247 "4"
d G "CCP_CAPTURE_RE" 1 248 "5"
d G "CCP_CAPTURE_DIV_4" 1 249 "6"
d G "CCP_CAPTURE_DIV_16" 1 250 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 251 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 252 "9"
d G "CCP_COMPARE_INT" 1 253 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 254 "0xB"
d G "CCP_PWM" 1 255 "0xC"
d G "CCP_PWM_PLUS_1" 1 256 "0x1c"
d G "CCP_PWM_PLUS_2" 1 257 "0x2c"
d G "CCP_PWM_PLUS_3" 1 258 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
v L "mode" 1 264 "int32" `144 
f B "setup_ccp2" 1 264 "void(int32 mode)" `143 
v L "mode" 1 265 "int32" `146 
v L "pwm" 1 265 "int8" `147 
f G "setup_ccp2" 1 265 "void(int32 mode,int8 pwm)" `145 
v L "value" 1 266 "int16" `149 
f B "set_pwm2_duty" 1 266 "void(int16 value)" `148 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
v L "mode" 1 275 "int8" `154 
f B "setup_psp" 1 275 "void(int8 mode)" `153 
f B "psp_output_full" 1 276 "int8()" `155 
f B "psp_input_full" 1 277 "int8()" `156 
f B "psp_overflow" 1 278 "int8()" `157  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 280 "0x10"
d G "PSP_DISABLED" 1 281 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
v L "mode" 1 288 "int32" `160 
f B "setup_spi" 1 288 "void(int32 mode)" `159 
v L "value" 1 289 "int8" `162 
f B "spi_write" 1 289 "void(int8 value)" `161 
f B "spi_read" 1 290 "int8()" `163 
v L "value" 1 291 "int8" `165 
f G "spi_read" 1 291 "int8(int8 value)" `164 
f B "spi_data_in" 1 292 "int8()" `166  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 294 "0x00"
d G "SPI_MASTER" 1 295 "0x20"
d G "SPI_SLAVE" 1 296 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 297 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 298 "0x00"
d G "SPI_CLK_DIV_4" 1 299 "0x00"
d G "SPI_CLK_DIV_16" 1 300 "0x01"
d G "SPI_CLK_DIV_64" 1 301 "0x02"
d G "SPI_CLK_T2" 1 302 "0x03"
d G "SPI_SS_DISABLED" 1 303 "0x01"
d G "SPI_XMIT_L_TO_H" 1 305 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 306 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 308 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 309 "0x8000"
d G "SPI_L_TO_H" 1 312 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 313 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 317 "int32" `168 
f B "setup_uart" 1 317 "void(int32 baud)" `167 
v L "baud" 1 318 "int32" `170 
v L "stream" 1 318 "int8" `171 
f G "setup_uart" 1 318 "void(int32 baud,int8 stream)" `169 
v L "baud" 1 319 "int32" `173 
v L "stream" 1 319 "int8" `174 
v L "clock" 1 319 "int32" `175 
f G "setup_uart" 1 319 "void(int32 baud,int8 stream,int32 clock)" `172 
v L "baud" 1 320 "int32" `177 
f B "set_uart_speed" 1 320 "void(int32 baud)" `176 
v L "baud" 1 321 "int32" `179 
v L "stream" 1 321 "int8" `180 
f G "set_uart_speed" 1 321 "void(int32 baud,int8 stream)" `178 
v L "baud" 1 322 "int32" `182 
v L "stream" 1 322 "int8" `183 
v L "clock" 1 322 "int32" `184 
f G "set_uart_speed" 1 322 "void(int32 baud,int8 stream,int32 clock)" `181  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 326 "2"
d G "UART_DATA" 1 327 "4"
c L "set_uart_speed" 1 3 4 "FUNCTION"
v L "mode" 1 334 "int16" `186 
f B "setup_adc" 1 334 "void(int16 mode)" `185 
f B "read_adc" 1 335 "int8()" `187 
v L "mode" 1 336 "int8" `189 
f G "read_adc" 1 336 "int8(int8 mode)" `188 
f G "read_adc" 1 337 "int16()" `190 
v L "mode" 1 338 "int8" `192 
f G "read_adc" 1 338 "int16(int8 mode)" `191 
f B "adc_done" 1 339 "int8()" `193  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 341 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 342 "0x100"
d G "ADC_CLOCK_DIV_8" 1 343 "0x40"
d G "ADC_CLOCK_DIV_32" 1 344 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 345 "0xc0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
v L "setting" 1 348 "int8" `195 
f B "setup_adc_ports" 1 348 "void(int8 setting)" `194 
v L "channel" 1 349 "int8" `197 
f B "set_adc_channel" 1 349 "void(int8 channel)" `196  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 351 "7" "None"
d G "ALL_ANALOG" 1 352 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 353 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 354 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 355 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 356 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 357 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 358 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 359 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 360 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 361 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 362 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 363 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 364 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 365 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 366 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 367 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 368 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 369 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 370 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 371 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 372 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 373 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 374 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 375 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 376 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 377 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 378 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 381 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 382 "1"
d G "ADC_READ_ONLY" 1 383 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 389 "sint8" `199 
f B "abs" 1 389 "sint8(sint8 x)" `198 
v L "x" 1 390 "sint16" `201 
f G "abs" 1 390 "sint16(sint16 x)" `200 
v L "x" 1 391 "sint32" `203 
f G "abs" 1 391 "sint32(sint32 x)" `202 
v L "x" 1 392 "float" `205 
f G "abs" 1 392 "float(float x)" `204 
v L "??65535" 1 393 "int8" `207 
v L "??65535" 1 393 "int8" `208 
f B "_mul" 1 393 "int16(int8 ,int8 )" `206 
v L "??65535" 1 394 "sint8" `207 
v L "??65535" 1 394 "sint8" `211 
f G "_mul" 1 394 "sint16(sint8 ,sint8 )" `209 
v L "??65535" 1 395 "int16" `207 
v L "??65535" 1 395 "int16" `214 
f G "_mul" 1 395 "int32(int16 ,int16 )" `212 
v L "??65535" 1 396 "sint16" `207 
v L "??65535" 1 396 "sint16" `217 
f G "_mul" 1 396 "sint32(sint16 ,sint16 )" `215  "Memory Manipulation Prototypes:"
v L "bank" 1 399 "int8" `219 
v L "offset" 1 399 "int8" `220 
f B "read_bank" 1 399 "int8(int8 bank,int8 offset)" `218 
v L "bank" 1 400 "int8" `222 
v L "offset" 1 400 "int8" `223 
v L "value" 1 400 "int8" `224 
f B "write_bank" 1 400 "void(int8 bank,int8 offset,int8 value)" `221 
v L "dest" 1 401 "*int8" `226 
v L "src" 1 401 "*int8" `227 
f B "strcpy" 1 401 "void(*int8 dest,*int8 src)" `225 
v L "dest" 1 402 "*int8" `229 
v L "src" 1 402 "*int8" `230 
f B "strcopy" 1 402 "void(*int8 dest,*int8 src)" `228 
v L "destination" 1 403 "*int8" `232 
v L "value" 1 403 "int8" `233 
v L "num" 1 403 "int16" `234 
f B "memset" 1 403 "void(*int8 destination,int8 value,int16 num)" `231 
v L "destination" 1 404 "*int8" `236 
v L "source" 1 404 "*int8" `237 
v L "num" 1 404 "int16" `238 
f B "memcpy" 1 404 "void(*int8 destination,*int8 source,int16 num)" `235  "String Prototypes:"
v L "cvalue" 1 407 "int8" `240 
f B "toupper" 1 407 "int8(int8 cvalue)" `239 
v L "cvalue" 1 408 "int8" `242 
f B "tolower" 1 408 "int8(int8 cvalue)" `241 
v L "string" 1 409 "*int8" `244 
v L "cstring" 1 409 "*int8" `245 
f B "sprintf" 1 409 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `243  "Data Manipulators Prototypes:"
v L "address" 1 412 "*int8" `248 
v L "bytes" 1 412 "int8" `249 
v L "value" 1 412 "int8" `250 
f B "shift_left" 1 412 "int8(*int8 address,int8 bytes,int8 value)" `247 
v L "address" 1 413 "*int8" `252 
v L "bytes" 1 413 "int8" `253 
v L "value" 1 413 "int8" `254 
f B "shift_right" 1 413 "int8(*int8 address,int8 bytes,int8 value)" `251 
v L "address" 1 414 "*int8" `256 
v L "bytes" 1 414 "int8" `257 
f B "rotate_left" 1 414 "void(*int8 address,int8 bytes)" `255 
v L "address" 1 415 "*int8" `259 
v L "bytes" 1 415 "int8" `260 
f B "rotate_right" 1 415 "void(*int8 address,int8 bytes)" `258 
v L "value" 1 416 "int8" `262 
f B "swap" 1 416 "void(int8 value)" `261 
v L "var" 1 417 "int16" `264 
v L "offset" 1 417 "int8" `265 
f B "make8" 1 417 "int8(int16 var,int8 offset)" `263 
v L "var" 1 418 "int32" `264 
v L "offset" 1 418 "int8" `268 
f G "make8" 1 418 "int8(int32 var,int8 offset)" `266 
v L "varhigh" 1 419 "int8" `270 
v L "varlow" 1 419 "int8" `271 
f B "make16" 1 419 "int16(int8 varhigh,int8 varlow)" `269 
v L "var1" 1 420 "int16" `273 
f B "make32" 1 420 "int32(int16 var1)" `272 
v L "var1" 1 421 "int16" `275 
v L "var2" 1 421 "int16" `276 
f G "make32" 1 421 "int32(int16 var1,int16 var2)" `274 
v L "var1" 1 422 "int16" `275 
v L "var2" 1 422 "int8" `279 
f G "make32" 1 422 "int32(int16 var1,int8 var2)" `277 
v L "var1" 1 423 "int16" `281 
v L "var2" 1 423 "int8" `282 
v L "var3" 1 423 "int8" `283 
f G "make32" 1 423 "int32(int16 var1,int8 var2,int8 var3)" `280 
v L "var1" 1 424 "int8" `285 
f G "make32" 1 424 "int32(int8 var1)" `284 
v L "var1" 1 425 "int8" `275 
v L "var2" 1 425 "int8" `288 
f G "make32" 1 425 "int32(int8 var1,int8 var2)" `286 
v L "var1" 1 426 "int8" `281 
v L "var2" 1 426 "int8" `282 
v L "var3" 1 426 "int8" `292 
f G "make32" 1 426 "int32(int8 var1,int8 var2,int8 var3)" `289 
v L "var1" 1 427 "int8" `294 
v L "var2" 1 427 "int8" `295 
v L "var3" 1 427 "int8" `296 
v L "var4" 1 427 "int8" `297 
f G "make32" 1 427 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `293 
v L "var1" 1 428 "int8" `275 
v L "var2" 1 428 "int16" `300 
f G "make32" 1 428 "int32(int8 var1,int16 var2)" `298 
v L "var1" 1 429 "int8" `281 
v L "var2" 1 429 "int16" `282 
v L "var3" 1 429 "int8" `304 
f G "make32" 1 429 "int32(int8 var1,int16 var2,int8 var3)" `301 
v L "var1" 1 430 "int8" `281 
v L "var2" 1 430 "int8" `282 
v L "var3" 1 430 "int16" `308 
f G "make32" 1 430 "int32(int8 var1,int8 var2,int16 var3)" `305 
v L "var" 1 431 "int8" `310 
v L "bit" 1 431 "int8" `311 
f B "bit_set" 1 431 "void(int8 var,int8 bit)" `309 
v L "var" 1 432 "int16" `310 
v L "bit" 1 432 "int8" `314 
f G "bit_set" 1 432 "void(int16 var,int8 bit)" `312 
v L "var" 1 433 "int32" `310 
v L "bit" 1 433 "int8" `317 
f G "bit_set" 1 433 "void(int32 var,int8 bit)" `315 
v L "var" 1 434 "int8" `319 
v L "bit" 1 434 "int8" `320 
f B "bit_clear" 1 434 "void(int8 var,int8 bit)" `318 
v L "var" 1 435 "int16" `319 
v L "bit" 1 435 "int8" `323 
f G "bit_clear" 1 435 "void(int16 var,int8 bit)" `321 
v L "var" 1 436 "int32" `319 
v L "bit" 1 436 "int8" `326 
f G "bit_clear" 1 436 "void(int32 var,int8 bit)" `324 
v L "var" 1 437 "int8" `328 
v L "bit" 1 437 "int8" `329 
f B "bit_test" 1 437 "int8(int8 var,int8 bit)" `327 
v L "var" 1 438 "int16" `328 
v L "bit" 1 438 "int8" `332 
f G "bit_test" 1 438 "int8(int16 var,int8 bit)" `330 
v L "var" 1 439 "int32" `328 
v L "bit" 1 439 "int8" `335 
f G "bit_test" 1 439 "int8(int32 var,int8 bit)" `333  "#use delay() Prototypes:"
v L "count" 1 442 "int8" `337 
f B "delay_cycles" 1 442 "void(int8 count)" `336 
v L "time" 1 443 "int16" `339 
f B "delay_ms" 1 443 "void(int16 time)" `338 
v L "time" 1 444 "int16" `341 
f B "delay_us" 1 444 "void(int16 time)" `340  "#use rs232() Prototypes:"
v L "cdata" 1 447 "int8" `343 
f B "putchar" 1 447 "void(int8 cdata)" `342 
v L "cdata" 1 448 "int8" `345 
v L "stream" 1 448 "int8" `346 
f G "putchar" 1 448 "void(int8 cdata,int8 stream)" `344 
v L "string" 1 449 "*int8" `348 
f B "puts" 1 449 "void(*int8 string)" `347 
v L "string" 1 450 "*int8" `350 
v L "stream" 1 450 "int8" `351 
f G "puts" 1 450 "void(*int8 string,int8 stream)" `349 
f B "getch" 1 451 "int8()" `352 
v L "stream" 1 452 "int8" `354 
f G "getch" 1 452 "int8(int8 stream)" `353 
v L "string" 1 453 "*int8" `356 
f B "gets" 1 453 "void(*int8 string)" `355 
v L "string" 1 454 "*int8" `358 
v L "stream" 1 454 "int8" `359 
f G "gets" 1 454 "void(*int8 string,int8 stream)" `357 
f B "kbhit" 1 455 "int8()" `360 
v L "stream" 1 456 "int8" `362 
f G "kbhit" 1 456 "int8(int8 stream)" `361 
v L "string" 1 457 "*int8" `364 
f B "printf" 1 457 "void(*int8 string,*int8 _VA_LIST)" `363 
v L "stream" 1 458 "int8" `367 
v L "string" 1 458 "*int8" `368 
f B "fprintf" 1 458 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `366 
f B "putc_send" 1 459 "void()" `370 
v L "stream" 1 460 "int8" `372 
f B "fputc_send" 1 460 "void(int8 stream)" `371 
f B "rcv_buffer_full" 1 461 "int8()" `373 
v L "stream" 1 462 "int8" `375 
f G "rcv_buffer_full" 1 462 "int8(int8 stream)" `374 
f B "rcv_buffer_bytes" 1 463 "int16()" `376 
v L "stream" 1 464 "int8" `378 
f G "rcv_buffer_bytes" 1 464 "int16(int8 stream)" `377 
f B "tx_buffer_full" 1 465 "int8()" `379 
v L "stream" 1 466 "int8" `381 
f G "tx_buffer_full" 1 466 "int8(int8 stream)" `380 
f B "tx_buffer_bytes" 1 467 "int16()" `382 
v L "stream" 1 468 "int8" `384 
f G "tx_buffer_bytes" 1 468 "int16(int8 stream)" `383  "#use i2c() Prototypes:"
f B "i2c_read" 1 471 "int8()" `385 
v L "stream" 1 472 "int8" `387 
f G "i2c_read" 1 472 "int8(int8 stream)" `386 
v L "stream" 1 473 "int8" `389 
v L "ack" 1 473 "int8" `390 
f G "i2c_read" 1 473 "int8(int8 stream,int8 ack)" `388 
v L "data" 1 474 "int8" `392 
f B "i2c_write" 1 474 "int8(int8 data)" `391 
v L "stream" 1 475 "int8" `394 
v L "data" 1 475 "int8" `395 
f G "i2c_write" 1 475 "int8(int8 stream,int8 data)" `393 
f B "i2c_start" 1 476 "void()" `396 
v L "stream" 1 477 "int8" `398 
f G "i2c_start" 1 477 "void(int8 stream)" `397 
v L "stream" 1 478 "int8" `400 
v L "restart" 1 478 "int8" `401 
f G "i2c_start" 1 478 "void(int8 stream,int8 restart)" `399 
f B "i2c_stop" 1 479 "void()" `402 
v L "stream" 1 480 "int8" `404 
f G "i2c_stop" 1 480 "void(int8 stream)" `403 
f B "i2c_isr_state" 1 481 "int8()" `405 
v L "addr" 1 482 "int8" `407 
f B "i2c_slaveaddr" 1 482 "void(int8 addr)" `406 
v L "stream" 1 483 "int8" `409 
v L "addr" 1 483 "int8" `410 
f G "i2c_slaveaddr" 1 483 "void(int8 stream,int8 addr)" `408 
f B "i2c_poll" 1 484 "int8()" `411 
v L "stream" 1 485 "int8" `413 
f G "i2c_poll" 1 485 "int8(int8 stream)" `412 
v L "baud" 1 486 "int32" `415 
f B "i2c_init" 1 486 "void(int32 baud)" `414 
v L "stream" 1 487 "int8" `417 
v L "baud" 1 487 "int32" `418 
f G "i2c_init" 1 487 "void(int8 stream,int32 baud)" `416  "#use spi() Prototypes:"
f B "spi_xfer" 1 490 "int8()" `419 
f G "spi_xfer" 1 491 "int16()" `420 
f G "spi_xfer" 1 492 "int32()" `421 
v L "data" 1 493 "int8" `423 
f G "spi_xfer" 1 493 "int8(int8 data)" `422 
v L "data" 1 494 "int16" `425 
f G "spi_xfer" 1 494 "int16(int16 data)" `424 
v L "data" 1 495 "int32" `427 
f G "spi_xfer" 1 495 "int32(int32 data)" `426 
v L "stream" 1 496 "int8" `429 
v L "data" 1 496 "int8" `430 
f G "spi_xfer" 1 496 "int8(int8 stream,int8 data)" `428 
v L "stream" 1 497 "int8" `429 
v L "data" 1 497 "int16" `433 
f G "spi_xfer" 1 497 "int16(int8 stream,int16 data)" `431 
v L "stream" 1 498 "int8" `429 
v L "data" 1 498 "int32" `436 
f G "spi_xfer" 1 498 "int32(int8 stream,int32 data)" `434 
v L "stream" 1 499 "int8" `438 
v L "data" 1 499 "int8" `439 
v L "bits" 1 499 "int8" `440 
f G "spi_xfer" 1 499 "int8(int8 stream,int8 data,int8 bits)" `437 
v L "stream" 1 500 "int8" `438 
v L "data" 1 500 "int16" `439 
v L "bits" 1 500 "int8" `444 
f G "spi_xfer" 1 500 "int16(int8 stream,int16 data,int8 bits)" `441 
v L "stream" 1 501 "int8" `438 
v L "data" 1 501 "int32" `439 
v L "bits" 1 501 "int8" `448 
f G "spi_xfer" 1 501 "int32(int8 stream,int32 data,int8 bits)" `445 
v L "baud" 1 502 "int32" `450 
f B "spi_init" 1 502 "void(int32 baud)" `449 
v L "stream" 1 503 "int8" `452 
v L "baud" 1 503 "int32" `453 
f G "spi_init" 1 503 "void(int8 stream,int32 baud)" `451 
v L "baud" 1 504 "int32" `455 
f B "spi_speed" 1 504 "void(int32 baud)" `454 
v L "stream" 1 505 "int8" `457 
v L "baud" 1 505 "int32" `458 
f G "spi_speed" 1 505 "void(int8 stream,int32 baud)" `456 
v L "stream" 1 506 "int8" `460 
v L "baud" 1 506 "int32" `461 
v L "clock" 1 506 "int32" `462 
f G "spi_speed" 1 506 "void(int8 stream,int32 baud,int32 clock)" `459 
v L "data" 1 507 "int8" `464 
f B "spi_prewrite" 1 507 "void(int8 data)" `463 
v L "data" 1 508 "int16" `466 
f G "spi_prewrite" 1 508 "void(int16 data)" `465 
v L "data" 1 509 "int32" `468 
f G "spi_prewrite" 1 509 "void(int32 data)" `467 
v L "??65535" 1 510 "int8" `470 
v L "data" 1 510 "int8" `471 
f G "spi_prewrite" 1 510 "void(int8 ,int8 data)" `469 
v L "??65535" 1 511 "int8" `470 
v L "data" 1 511 "int16" `474 
f G "spi_prewrite" 1 511 "void(int8 ,int16 data)" `472 
v L "??65535" 1 512 "int8" `470 
v L "data" 1 512 "int32" `477 
f G "spi_prewrite" 1 512 "void(int8 ,int32 data)" `475 
f B "spi_xfer_in" 1 513 "int8()" `478 
f G "spi_xfer_in" 1 514 "int16()" `479 
f G "spi_xfer_in" 1 515 "int32()" `480 
v L "bits" 1 516 "int8" `482 
f G "spi_xfer_in" 1 516 "int8(int8 bits)" `481 
v L "bits" 1 517 "int8" `484 
f G "spi_xfer_in" 1 517 "int16(int8 bits)" `483 
v L "bits" 1 518 "int8" `486 
f G "spi_xfer_in" 1 518 "int32(int8 bits)" `485 
v L "stream" 1 519 "int8" `488 
v L "bits" 1 519 "int8" `489 
f G "spi_xfer_in" 1 519 "int8(int8 stream,int8 bits)" `487 
v L "stream" 1 520 "int8" `488 
v L "bits" 1 520 "int8" `492 
f G "spi_xfer_in" 1 520 "int16(int8 stream,int8 bits)" `490 
v L "stream" 1 521 "int8" `488 
v L "bits" 1 521 "int8" `495 
f G "spi_xfer_in" 1 521 "int32(int8 stream,int8 bits)" `493  "#use rtos() Prototypes:"
f B "rtos_run" 1 524 "void()" `496 
f B "rtos_yield" 1 525 "void()" `497 
v L "task" 1 526 "int8" `499 
f B "rtos_enable" 1 526 "void(int8 task)" `498 
v L "task" 1 527 "int8" `501 
f B "rtos_disable" 1 527 "void(int8 task)" `500 
f B "rtos_terminate" 1 528 "void()" `502 
v L "flag" 1 529 "int8" `504 
f B "rtos_await" 1 529 "void(int8 flag)" `503 
v L "sem" 1 530 "int8" `506 
f B "rtos_wait" 1 530 "void(int8 sem)" `505 
v L "sem" 1 531 "int8" `508 
f B "rtos_signal" 1 531 "void(int8 sem)" `507 
v L "task" 1 532 "int8" `510 
v L "msg" 1 532 "int8" `511 
f B "rtos_msg_send" 1 532 "void(int8 task,int8 msg)" `509 
f B "rtos_msg_read" 1 533 "int8()" `512 
f B "rtos_msg_poll" 1 534 "int8()" `513 
v L "task" 1 535 "int8" `515 
f B "rtos_overrun" 1 535 "int8(int8 task)" `514 
v L "task" 1 536 "int8" `517 
v L "stat" 1 536 "*int8" `518 
f B "rtos_stats" 1 536 "void(int8 task,*int8 stat)" `516  "#use timer() Prototypes:"
f B "get_ticks" 1 539 "int8()" `519 
f G "get_ticks" 1 540 "int16()" `520 
f G "get_ticks" 1 541 "int32()" `521 
v L "stream" 1 542 "int8" `523 
f G "get_ticks" 1 542 "int8(int8 stream)" `522 
v L "stream" 1 543 "int8" `525 
f G "get_ticks" 1 543 "int16(int8 stream)" `524 
v L "stream" 1 544 "int8" `527 
f G "get_ticks" 1 544 "int32(int8 stream)" `526 
v L "value" 1 545 "int8" `529 
f B "set_ticks" 1 545 "void(int8 value)" `528 
v L "value" 1 546 "int16" `531 
f G "set_ticks" 1 546 "void(int16 value)" `530 
v L "value" 1 547 "int32" `533 
f G "set_ticks" 1 547 "void(int32 value)" `532 
v L "stream" 1 548 "int8" `535 
v L "value" 1 548 "int8" `536 
f G "set_ticks" 1 548 "void(int8 stream,int8 value)" `534 
v L "stream" 1 549 "int8" `535 
v L "value" 1 549 "int16" `539 
f G "set_ticks" 1 549 "void(int8 stream,int16 value)" `537 
v L "stream" 1 550 "int8" `535 
v L "value" 1 550 "int32" `542 
f G "set_ticks" 1 550 "void(int8 stream,int32 value)" `540  "#use pwm() Prototypes:"
f B "pwm_on" 1 553 "void()" `543 
v L "stream" 1 554 "int8" `545 
f G "pwm_on" 1 554 "void(int8 stream)" `544 
f B "pwm_off" 1 555 "void()" `546 
v L "stream" 1 556 "int8" `548 
f G "pwm_off" 1 556 "void(int8 stream)" `547 
v L "duty" 1 557 "int16" `550 
f B "pwm_set_duty" 1 557 "void(int16 duty)" `549 
v L "stream" 1 558 "int8" `552 
v L "duty" 1 558 "int16" `553 
f G "pwm_set_duty" 1 558 "void(int8 stream,int16 duty)" `551 
v L "percent" 1 559 "int16" `555 
f B "pwm_set_duty_percent" 1 559 "void(int16 percent)" `554 
v L "stream" 1 560 "int8" `557 
v L "percent" 1 560 "int16" `558 
f G "pwm_set_duty_percent" 1 560 "void(int8 stream,int16 percent)" `556 
v L "frequency" 1 561 "int32" `560 
f B "pwm_set_frequency" 1 561 "void(int32 frequency)" `559 
v L "stream" 1 562 "int8" `562 
v L "frequency" 1 562 "int32" `563 
f G "pwm_set_frequency" 1 562 "void(int8 stream,int32 frequency)" `561  "#use capture() Prototypes:"
f B "get_capture_time" 1 565 "int16()" `564 
v L "stream" 1 566 "int8" `566 
f G "get_capture_time" 1 566 "int16(int8 stream)" `565 
f B "get_capture_event" 1 567 "int8()" `567 
v L "stream" 1 568 "int8" `569 
f G "get_capture_event" 1 568 "int8(int8 stream)" `568  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 581 "int16" `571 
f B "goto_address" 1 581 "void(int16 address)" `570 
v L "label" 1 582 "int16" `573 
f B "label_address" 1 582 "int16(int16 label)" `572  "Program Memory Prototypes:"
v L "address" 1 585 "int16" `575 
v L "dataptr" 1 585 "*int8" `576 
v L "count" 1 585 "int16" `577 
f B "read_program_memory" 1 585 "void(int16 address,*int8 dataptr,int16 count)" `574 
v L "address" 1 586 "int16" `579 
f B "read_program_eeprom" 1 586 "int16(int16 address)" `578 
v L "address" 1 587 "int16" `581 
f B "erase_program_eeprom" 1 587 "void(int16 address)" `580 
v L "address" 1 588 "int16" `583 
v L "dataptr" 1 588 "*int8" `584 
v L "count" 1 588 "int16" `585 
f B "write_program_memory" 1 588 "void(int16 address,*int8 dataptr,int16 count)" `582 
v L "address" 1 589 "int16" `587 
v L "data" 1 589 "int16" `588 
f B "write_program_eeprom" 1 589 "void(int16 address,int16 data)" `586  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 594 "int16" `589 
v L "address" 1 599 "__EEADDRESS__" `591 
f B "read_eeprom" 1 599 "int8(__EEADDRESS__ address)" `590 
v L "address" 1 600 "__EEADDRESS__" `593 
v L "value" 1 600 "int8" `594 
f B "write_eeprom" 1 600 "void(__EEADDRESS__ address,int8 value)" `592  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 607 "int32" `596 
f B "enable_interrupts" 1 607 "void(int32 interrupt)" `595 
v L "interrupt" 1 608 "int32" `598 
f B "disable_interrupts" 1 608 "void(int32 interrupt)" `597 
v L "interrupt" 1 609 "int32" `600 
f B "clear_interrupt" 1 609 "void(int32 interrupt)" `599 
v L "interrupt" 1 610 "int32" `602 
f B "interrupt_active" 1 610 "int8(int32 interrupt)" `601 
v L "interrupt" 1 611 "int32" `604 
f B "interrupt_enabled" 1 611 "int8(int32 interrupt)" `603 
v L "source" 1 612 "int8" `606 
v L "edge" 1 612 "int8" `607 
f B "ext_int_edge" 1 612 "void(int8 source,int8 edge)" `605 
v L "address" 1 613 "int16" `609 
f B "jump_to_irs" 1 613 "void(int16 address)" `608  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 615 "0x40"
d G "H_TO_L" 1 616 "0"
d G "GLOBAL" 1 618 "0x0BC0"
d G "PERIPH" 1 619 "0x0B40"
d G "INT_RTCC" 1 620 "0x000B20"
d G "INT_RB" 1 621 "0x00FF0B08"
d G "INT_EXT_L2H" 1 622 "0x50000B10"
d G "INT_EXT_H2L" 1 623 "0x60000B10"
d G "INT_EXT" 1 624 "0x000B10"
d G "INT_AD" 1 625 "0x008C40"
d G "INT_TBE" 1 626 "0x008C10"
d G "INT_RDA" 1 627 "0x008C20"
d G "INT_TIMER1" 1 628 "0x008C01"
d G "INT_TIMER2" 1 629 "0x008C02"
d G "INT_CCP1" 1 630 "0x008C04"
d G "INT_CCP2" 1 631 "0x008D01"
d G "INT_SSP" 1 632 "0x008C08"
d G "INT_PSP" 1 633 "0x008C80"
d G "INT_BUSCOL" 1 634 "0x008D08"
d G "INT_EEPROM" 1 635 "0x008D10"
d G "INT_TIMER0" 1 636 "0x000B20"
D G "_STDLIBM" 2 14 ""
C L "jump_to_irs" 2 2 1 "FUNCTION"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
T G "node_t" 2 25 "{int8 size,int16 next}" `619 
D G "debug_stdlibm" 2 38 "(s)"
D G "_MEMMGMT_CSIZE" 4 18 "127"
D G "_MEMMGMT_POS" 4 19 "7"
V L "size" 4 22 "int16" `621 
V L "ptr" 4 22 "*node_t" `622  "create node at given location"
F G "create_node" 4 23 "*node_t(int16 size,*node_t ptr)" `620 
V L "result" 4 24 "*node_t" `623 
V L "node" 4 30 "*node_t" `625 
V L "size" 4 30 "int16" `626  "update the size of given node"
F G "update_node" 4 31 "void(*node_t node,int16 size)" `624 
C L "insert_node_after" 4 2 2 "FUNCTION"
V L "place" 4 36 "*node_t" `628 
V L "node" 4 36 "*node_t" `629  "place the node after another given node"
F G "insert_node_after" 4 37 "void(*node_t place,*node_t node)" `627 
V L "node" 4 47 "*node_t" `631 
F G "remove_node" 4 47 "void(*node_t node)" `630  "remove the given node from the memlist"
V L "ptr" 4 48 "*node_t" `632 
F G "traverse" 2 58 "void()" `633 
V L "node" 2 59 "*node_t" `634 
V L "temp" 2 59 "*node_t" `635 
V L "nsize" 2 60 "int16" `636 
V L "nextsize" 2 60 "int16" `637 
C L "traverse" 2 72 1 "FUNCTION"
C L "traverse" 2 72 1 "FUNCTION"
V L "size" 2 99 "int16" `639 
F G "malloc" 2 100 "*int8(int16 size)" `638 
V L "node" 2 101 "*node_t" `640 
V L "new" 2 101 "*node_t" `641 
V L "nsize" 2 102 "int16" `642 
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
C L "malloc" 2 72 1 "FUNCTION"
V L "nmemb" 2 150 "int16" `644 
V L "size" 2 150 "int16" `645 
F G "calloc" 2 151 "*int8(int16 nmemb,int16 size)" `643 
V L "node" 2 152 "*node_t" `646 
V L "new" 2 152 "*node_t" `647 
V L "nsize" 2 153 "int16" `648 
V L "resize" 2 153 "int16" `649 
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
C L "calloc" 2 72 1 "FUNCTION"
V L "ptr" 2 198 "*int8" `658 
F G "free" 2 199 "void(*int8 ptr)" `657 
V L "node" 2 200 "*node_t" `659 
V L "nsize" 2 201 "int16" `660 
C L "free" 2 72 1 "FUNCTION"
C L "free" 2 72 1 "FUNCTION"
C L "free" 2 72 1 "FUNCTION"
V L "ptr" 2 229 "*int8" `662 
V L "size" 2 229 "int16" `663 
F G "realloc" 2 230 "*int8(*int8 ptr,int16 size)" `661 
V L "node" 2 231 "*node_t" `664 
V L "new" 2 231 "*node_t" `665 
V L "temp" 2 231 "*node_t" `666 
V L "nsize" 2 232 "int16" `667 
V L "nextsize" 2 232 "int16" `668 
V L "newptr" 2 233 "*int8" `669 
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
C L "realloc" 2 72 1 "FUNCTION"
D G "_STRING" 5 12 ""
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "memmove" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `671 
V L "s2" 5 34 "*int8" `672 
V L "n" 5 34 "int16" `673 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `670 
V L "sc1" 5 36 "*int8" `674 
V L "sc2" 5 37 "*int8" `675 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
V L "s1" 5 61 "*int8" `677 
V L "s2" 5 61 "*int8" `678 
V L "n" 5 61 "int16" `679 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `676 
V L "s" 5 63 "*int8" `680 
C L "strcat" 5 19 3 "FUNCTION"
V L "s1" 5 78 "*int8" `682 
V L "s2" 5 78 "*int8" `683 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `681 
V L "s" 5 80 "*int8" `684 
C L "strncat" 5 19 2 "FUNCTION"
V L "s1" 5 96 "*int8" `686 
V L "s2" 5 96 "*int8" `687 
V L "n" 5 96 "int16" `688 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `685 
V L "s" 5 98 "*int8" `689 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `691 
V L "s2" 5 120 "*int8" `692 
V L "n" 5 120 "int16" `693 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n)" `690 
V L "su1" 5 122 "*int8" `694 
V L "su2" 5 122 "*int8" `695 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*int8" `697 
V L "s2" 5 134 "*int8" `698 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `696 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*int8" `700 
V L "s2" 5 144 "*int8" `701 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `699 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*int8" `703 
V L "s2" 5 157 "*int8" `704 
V L "n" 5 157 "int16" `705 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `702 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*int8" `707 
V L "s2" 5 169 "*int8" `708 
V L "n" 5 169 "int16" `709 
F G "strxfrm" 5 170 "int16(*int8 s1,*int8 s2,int16 n)" `706 
V L "s" 5 171 "*int8" `710 
V L "n1" 5 172 "int8" `711 
C L "memchr" 5 19 3 "FUNCTION"
V L "s" 5 191 "*int8" `713 
V L "c" 5 191 "int8" `714 
V L "n" 5 191 "int16" `715 
F G "memchr" 5 192 "*int8(*int8 s,int8 c,int16 n)" `712 
V L "uc" 5 193 "int8" `716 
V L "su" 5 194 "*int8" `717 
C L "strchr" 5 19 2 "FUNCTION"
V L "s" 5 205 "*int8" `719 
V L "c" 5 205 "int8" `720 
F G "strchr" 5 206 "*int8(*int8 s,int8 c)" `718 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*int8" `722 
V L "s2" 5 217 "*int8" `723 
F G "strcspn" 5 218 "int8(*int8 s1,*int8 s2)" `721 
V L "sc1" 5 219 "*int8" `724 
V L "sc2" 5 219 "*int8" `725 
C L "strpbrk" 5 19 4 "FUNCTION"
V L "s1" 5 232 "*int8" `727 
V L "s2" 5 232 "*int8" `728 
F G "strpbrk" 5 233 "*int8(*int8 s1,*int8 s2)" `726 
V L "sc1" 5 234 "*int8" `729 
V L "sc2" 5 234 "*int8" `730 
C L "strrchr" 5 19 2 "FUNCTION"
V L "s" 5 247 "*int8" `732 
V L "c" 5 247 "int8" `733 
F G "strrchr" 5 248 "*int8(*int8 s,int8 c)" `731 
V L "p" 5 249 "*int8" `734 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*int8" `736 
V L "s2" 5 262 "*int8" `737 
F G "strspn" 5 263 "int8(*int8 s1,*int8 s2)" `735 
V L "sc1" 5 264 "*int8" `738 
V L "sc2" 5 264 "*int8" `739 
C L "strstr" 5 19 6 "FUNCTION"
V L "s1" 5 281 "*int8" `741 
V L "s2" 5 281 "*int8" `742 
F G "strstr" 5 282 "*int8(*int8 s1,*int8 s2)" `740 
V L "s" 5 283 "*int8" `743 
V L "t" 5 283 "*int8" `744 
C L "strtok" 5 19 13 "FUNCTION"
V L "s1" 5 320 "*int8" `746 
V L "s2" 5 320 "*int8" `747 
F G "strtok" 5 321 "*int8(*int8 s1,*int8 s2)" `745 
V L "beg" 5 322 "*int8" `748 
V L "end" 5 322 "*int8" `749 
V L "save" 5 323 "*int8" `750 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*int8" `752 
F G "strlen" 5 370 "int8(*int8 s)" `751 
V L "sc" 5 371 "*int8" `753 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*int8" `755 
V L "s2" 5 380 "*int8" `756 
F G "stricmp" 5 381 "sint8(*int8 s1,*int8 s2)" `754 
C L "strlwr" 5 19 3 "FUNCTION"
V L "s" 5 394 "*int8" `760 
F G "strlwr" 5 395 "*int8(*int8 s)" `759 
V L "p" 5 396 "*int8" `761 
C L "strupr" 5 19 3 "FUNCTION"
V L "s" 5 408 "*int8" `763 
F G "strupr" 5 409 "*int8(*int8 s)" `762 
V L "p" 5 410 "*int8" `764 
D G "lcd_rs" 7 2 "pin_E2"
D G "lcd_rw" 7 6 "pin_e1"
D G "lcd_e" 7 10 "pin_e0"
D G "output_lcd" 7 14 "output_d"
D G "lcd_function_set" 7 17 "0x38"
D G "lcd_display_control" 7 18 "0x0f"
D G "lcd_clear_display" 7 19 "0x01"
D G "lcd_entry_mode" 7 20 "0x06"
D G "LCD_ADDR_LINE1" 7 21 "0X80"
D G "LCD_ADDR_LINE2" 7 22 "0XC0"
D G "LCD_ADDR_LINE3" 7 23 "0X94"
D G "LCD_ADDR_LINE4" 7 24 "0XD4"
V G "LCD_SO_X" 7 26 "[11][6]" `769 
V G "LCD_MA_8DOAN" 7 40 "[1]" `773 
C L "lcd_out" 7 27 1 "FUNCTION"
V L "x" 7 50 "*int8" `777 
F G "lcd_out" 7 51 "void(*int8 x)" `776 
V L "mdk" 7 56 "int8" `779 
F G "lcd_command" 7 57 "void(int8 mdk)" `778 
F G "lcd_clear" 7 62 "void()" `780 
V L "mht" 7 65 "int8" `782 
F G "lcd_data" 7 66 "void(int8 mht)" `781 
V L "x" 7 71 "sint8" `784 
V L "y" 7 71 "sint8" `785 
F G "lcd_goto_xy" 7 72 "void(sint8 x,sint8 y)" `783 
V L "lcd_vitri" 7 73 "int8[1]" `786 
V L "so" 7 77 "int8" `788 
V L "x" 7 77 "int8" `789 
V L "y" 7 77 "int8" `790 
F G "sl" 7 78 "void(int8 so,int8 x,int8 y)" `787 
V L "n" 7 79 "int8" `791 
F G "lcd_setup" 7 89 "void()" `795 
D G "GIAY_HTAI" 8 1 "0X00"
D G "PHUT_HTAI" 8 2 "0X50"
D G "GIO_HTAI" 8 3 "0X12"
D G "THU_HTAI" 8 4 "4"
D G "NGAY_HTAI" 8 5 "0X09"
D G "THANG_HTAI" 8 6 "0X11"
D G "NAM_HTAI" 8 7 "0X16"
D G "MA_DS" 8 8 "0X98"
D G "ADDR_WR_13B07" 8 10 "0xD0"
D G "ADDR_RD_13B07" 8 11 "0xD1"
D G "ADDR_MEM" 8 12 "0x00"
V G "NAM_DS13" 8 14 "sint8" `796 
V G "THANG_DS13" 8 14 "sint8" `797 
V G "NGAY_DS13" 8 14 "sint8" `798 
V G "THU_DS13" 8 14 "sint8" `799 
V G "GIO_DS13" 8 14 "sint8" `800 
V G "PHUT_DS13" 8 15 "sint8" `801 
V G "GIAY_DS13" 8 15 "sint8" `802 
V G "MA_DS13" 8 15 "sint8" `803 
V G "CONTROL_DS13" 8 15 "sint8" `804 
V G "GIAYTAM" 8 15 "sint8" `805 
F G "THIET_LAP_THOI_GIAN_HIEN_TAI" 8 18 "void()" `806 
F G "NAP_THOI_GIAN_HTAI_VAO_DS13B07" 8 26 "void()" `807 
F G "DOC_THOI_GIAN_TU_REALTIME" 8 38 "void()" `808 
C L "DOC_THOI_GIAN_TU_REALTIME" 8 53 1 "FUNCTION"
F G "DOC_GIAY_TU_REALTIME" 8 59 "void()" `809 
V G "mangKyTu" 0 9 "int8[1]" `810 
V G "key" 0 10 "int8" `811 
V G "tk" 0 11 "int8[8]" `812 
V G "mk" 0 12 "int8[8]" `813 
V G "isDangNhapSuccess" 0 13 "int1" `814 
V G "tkAdmin" 0 14 "*int8" `815 
V G "isAdmin" 0 15 "int1" `817 
V G "vitriTK" 0 16 "int8" `818 
V G "vitriMK" 0 17 "int8" `819 
V G "vitriTKSelected" 0 18 "int8" `820 
V G "TKMKisInPuted" 0 19 "int1" `821 
V G "isTaoTK" 0 20 "int1" `822 
V G "isLevelMhOfAdmin" 0 21 "int8" `823 
V G "isLevelMhOfUser" 0 22 "int8" `824 
V G "isInputOK" 0 23 "int1" `825 
V G "soLanSai" 0 24 "int8" `826 
V G "arr" 0 25 "*int8[15]" `827 
V G "tang" 0 26 "int8" `828 
V G "tangcu" 0 27 "int8" `829 
V G "giam" 0 28 "int8" `830 
V G "numBerOfMangContro" 0 29 "int8" `831 
V G "userDaDangNhap" 0 30 "int1" `832 
V G "lichSuLogin" 0 31 "int8[8]" `833 
F G "KEY_NHAN" 0 34 "int8()" `834 
V L "MAQUETCOT" 0 35 "sint8" `835 
V L "MAPHIM" 0 35 "sint8" `836 
V L "HANG" 0 35 "sint8" `837 
V L "COT" 0 35 "sint8" `838 
V L "arr" 0 50 "*int8" `840 
V L "vitri" 0 50 "int8" `841 
F G "writeEEPROM" 0 51 "void(*int8 arr,int8 vitri)" `839 
V L "i" 0 52 "int8" `843 
V L "arr" 0 64 "*int8" `845 
V L "vitri" 0 64 "int8" `846 
F G "readEEPROM" 0 65 "void(*int8 arr,int8 vitri)" `844 
V L "i" 0 66 "int8" `848 
V L "c" 0 67 "int8" `849 
F G "manHinhThongBaoSai" 0 83 "void()" `850 
V L "arr" 0 90 "*int8" `854 
V L "vitri" 0 90 "int8" `855 
F G "inputData" 0 91 "void(*int8 arr,int8 vitri)" `853 
V L "arr" 0 95 "*int8" `858 
V L "HANG" 0 95 "int8" `859 
F G "DisplayInputTK" 0 96 "void(*int8 arr,int8 HANG)" `857 
V L "arr" 0 102 "*int8" `862 
F G "DisplayInputMK" 0 103 "void(*int8 arr)" `861 
F G "mHAdmin" 0 113 "void()" `864 
F G "mHUser" 0 126 "void()" `869 
F G "resetTKMK" 0 137 "void()" `873 
V L "i" 0 138 "int8" `874 
F G "checkMK" 0 149 "int8()" `875 
V L "arr" 0 151 "int8[8]" `876 
F G "checkTK" 0 188 "int8()" `877 
V L "arr" 0 190 "int8[8]" `878 
V L "i" 0 191 "int16" `879 
F G "manHinhDangNhap" 0 209 "void()" `880 
F G "xulyDangNhapSai" 0 223 "void()" `885 
F G "kiemTraTKMK" 0 229 "int8()" `886 
F G "manHinhThemUser" 0 236 "void()" `887 
F G "manHinhXoaTaiKhoan" 0 244 "void()" `891 
F G "manHinhDoiMatKhau" 0 253 "void()" `893 
F G "thongBaoDoiMKTC" 0 260 "void()" `896 
V L "HANG" 0 265 "int8" `899 
F G "xuLyInputTK" 0 266 "void(int8 HANG)" `898 
F G "xulyInputMK" 0 303 "void()" `900 
F G "thietLapAdmin1" 0 338 "void()" `901 
F G "thietLapAdmin2" 0 343 "void()" `902 
F G "thietLapAdmin3" 0 348 "void()" `903 
F G "backAdmin" 0 358 "void()" `906 
F G "readAllEpprom" 0 367 "void()" `907 
V L "i" 0 368 "int16" `908 
V L "d" 0 373 "*int8" `909 
V L "vitri" 0 382 "int8" `911 
F G "hienthi" 0 383 "void(int8 vitri)" `910 
V L "i" 0 384 "int8" `912 
V L "i" 0 392 "int8" `914 
F G "hienThiNDungCtRaLCD" 0 393 "void(int8 i)" `913 
V L "chuc" 0 394 "int8" `915 
V L "donvi" 0 395 "int8" `916 
F G "xuLyXemThem" 0 414 "void()" `922 
V L "i" 0 415 "int8" `923 
F G "MAIN" 0 437 "void()" `925 
V L "i" 0 438 "int16" `926 
V L "c" 0 439 "int8" `927  "UNSIGNED char arr2[8];"
V L "arrXoa" 0 441 "int8[8]" `928 
V L "resultTaoTK" 0 442 "int1" `929  "THIET_LAP_THOI_GIAN_HIEN_TAI () ;"
C L "MAIN" 0 443 1 "FUNCTION"
V L "arr1" 0 454 "int8[1]" `932 
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
C L "MAIN" 0 443 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "delay_ms" 1 0
F B "delay_us" 1 0
